<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="wield::StageBase" name="StageBase" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Stage</brief>
  <doc>A stage is the basic unit of processing in a SEDA architecture. It consists of a queue, and a function
to apply to messages in the queue.
</doc>
  <templatetypeparameter id="wield::StageBase::StageEnum" name="StageEnum">
    <brief>the enum defining names of all stages.</brief>
  </templatetypeparameter>
  <templatetypeparameter id="wield::StageBase::ProcessingFunctor" name="ProcessingFunctor">
    <brief>this stage's processing function.</brief>
  </templatetypeparameter>
  <templatetypeparameter id="wield::StageBase::QueueType" name="QueueType">
    <brief>the type of queue this stage will get inputs from.</brief>
  </templatetypeparameter>
  <constructor id="wield::StageBase::StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;" name="StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;">
    <argument id="wield::StageBase::StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;::stageName" name="stageName">
      <type name="StageEnum" />
    </argument>
    <argument id="wield::StageBase::StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;::dispatcher" name="dispatcher">
      <type name="DispatcherInterface&lt;StageEnumType, StageType&gt;" qualifier=" &amp;" ref="wield::DispatcherInterface#wield::DispatcherInterface" />
    </argument>
    <argument id="wield::StageBase::StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;::queue" name="queue">
      <type name="QueueType" qualifier=" &amp;" />
    </argument>
    <argument id="wield::StageBase::StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;::processingFunctor" name="processingFunctor">
      <type name="ProcessingFunctor" qualifier=" &amp;" />
    </argument>
  </constructor>
  <destructor id="wield::StageBase::~StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;" name="~StageBase&lt;StageEnum, ProcessingFunctor, QueueType&gt;" />
  <method id="wield::StageBase::push" name="push">
    <brief>Insert a message onto the stage's queue</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::StageBase::push::m" name="m">
      <doc>the message to insert</doc>
      <type name="MessageType" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="wield::StageBase::process" name="process">
    <brief> process a message</brief>
    <doc>pump the queue, if there is a message, process it.

</doc>
    <return>
      <doc>true if a message was processed, false otherwise.</doc>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="wield::StageBase::name" name="name">
    <brief>get the stage's name</brief>
    <return>
      <type name="" />
    </return>
  </method>
</classtemplate>