<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="wield::adapters::polymorphic::QueueAdapter" name="QueueAdapter" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>&amp;lt;QueueAdaptor&amp;gt; allows you to instantiate stages with different queue types.</brief>
  <doc>So for example stage1 could use a disruptor and stage2 could use a non-locking
linked list.</doc>
  <base access="public">
    <type name="QueueInterface&lt;ProcessingFunctor&gt;" />
  </base>
  <templatetypeparameter id="wield::adapters::polymorphic::QueueAdapter::ProcessingFunctor" name="ProcessingFunctor" />
  <templatetypeparameter id="wield::adapters::polymorphic::QueueAdapter::QueueType" name="QueueType" />
  <methodtemplate id="wield::adapters::polymorphic::QueueAdapter::QueueAdapter&lt;ProcessingFunctor, QueueType&gt;" name="QueueAdapter&lt;ProcessingFunctor, QueueType&gt;">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::adapters::polymorphic::QueueAdapter::QueueAdapter&lt;ProcessingFunctor, QueueType&gt;::args" name="args">
      <type name="Args" />
    </argument>
    <templatetypeparameter id="wield::adapters::polymorphic::QueueAdapter::QueueAdapter&lt;ProcessingFunctor, QueueType&gt;::Args" name="Args" />
  </methodtemplate>
  <method id="wield::adapters::polymorphic::QueueAdapter::push" name="push">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::adapters::polymorphic::QueueAdapter::push::message" name="message">
      <type name="QueueAdapter&lt;ProcessingFunctor, QueueType&gt;::MessagePtr" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::polymorphic::QueueAdapter::try_pop" name="try_pop">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="wield::adapters::polymorphic::QueueAdapter::try_pop::message" name="message">
      <type name="QueueAdapter&lt;ProcessingFunctor, QueueType&gt;::MessagePtr" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::polymorphic::QueueAdapter::unsafe_size" name="unsafe_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
</classtemplate>