<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="wield::adapters::PassThroughStageQueue" name="PassThroughStageQueue" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>A pass-through stage is a stage that does not queue a message</brief>
  <doc>but processes it immediately upon dispatch.

This can be used to easily combine stages into aggregate
stages without having to rework the application logic.

This is convenient while experimenting with work breakout
during development and performance testing.

I hope to eventually provide tools for doing pass-through
stage combination at compile time (without requiring client
code to introduce virtual function calls for queue functionality)
but that is a long way off I think.</doc>
  <base access="public">
    <type name="QueueInterface&lt;MessagePtr&gt;" />
  </base>
  <templatetypeparameter id="wield::adapters::PassThroughStageQueue::ProcessingFunctor" name="ProcessingFunctor" />
  <constructor id="wield::adapters::PassThroughStageQueue::PassThroughStageQueue&lt;ProcessingFunctor&gt;" name="PassThroughStageQueue&lt;ProcessingFunctor&gt;">
    <argument id="wield::adapters::PassThroughStageQueue::PassThroughStageQueue&lt;ProcessingFunctor&gt;::pf" name="pf">
      <type name="ProcessingFunctor" qualifier=" &amp;" />
    </argument>
  </constructor>
  <method id="wield::adapters::PassThroughStageQueue::push" name="push">
    <brief>called in the same thread as the stage invoking dispatch to</brief>
    <doc>the stage owning this queue (the previous stage in the
stage graph).</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::adapters::PassThroughStageQueue::push::message" name="message">
      <type name="PassThroughStageQueue&lt;ProcessingFunctor&gt;::MessagePtr" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::PassThroughStageQueue::tryPop" name="tryPop">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="wield::adapters::PassThroughStageQueue::tryPop::message" name="message">
      <type name="PassThroughStageQueue&lt;ProcessingFunctor&gt;::MessagePtr" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::PassThroughStageQueue::unsafeSize" name="unsafeSize">
    <return>
      <type name="size_t" />
    </return>
  </method>
</classtemplate>