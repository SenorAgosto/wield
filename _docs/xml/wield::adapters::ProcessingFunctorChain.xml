<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="wield::adapters::ProcessingFunctorChain" name="ProcessingFunctorChain" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>
    <ref ref="wield::adapters::ProcessingFunctorChain#wield::adapters::ProcessingFunctorChain">ProcessingFunctorChain</ref> is a pass-through queue used to chain multiple</brief>
  <doc>processing functors together (to be handled by a single stage).

An aggregate pass-through stage is a stage that does not queue a message
but processes it immediately upon dispatch &amp; the processing involves
multiple processing functors.

This is most useful as a tool to keep the logical aspects of processing a
message separated prior to actually separating the processing into different
stages. This is convenient while experimenting with work breakout
during development and performance testing.

CAVEAT: the functors used should probably not dispatch the message to a
different stage (unless it is the last in the chain) as doing so can
introduce race conditions into your application.
</doc>
  <base access="public">
    <type name="QueueInterface&lt;ProcessingFunctor&gt;" />
  </base>
  <templatetypeparameter id="wield::adapters::ProcessingFunctorChain::ProcessingFunctorType" name="ProcessingFunctorType" />
  <templatenontypeparameter default="std" id="wield::adapters::ProcessingFunctorChain::NumberOfProcessingFunctors" name="NumberOfProcessingFunctors">
    <type name="size_t" />
  </templatenontypeparameter>
  <methodtemplate id="wield::adapters::ProcessingFunctorChain::ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;" name="ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::adapters::ProcessingFunctorChain::ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;::args" name="args">
      <type name="Args" />
    </argument>
    <templatetypeparameter id="wield::adapters::ProcessingFunctorChain::ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;::Args" name="Args" />
  </methodtemplate>
  <method id="wield::adapters::ProcessingFunctorChain::push" name="push">
    <brief>called in the same thread as the stage invoking dispatch to</brief>
    <doc>the stage owning this queue (the previous stage in the
stage graph).</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="wield::adapters::ProcessingFunctorChain::push::message" name="message">
      <type name="ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;::MessagePtr" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::ProcessingFunctorChain::try_pop" name="try_pop">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="wield::adapters::ProcessingFunctorChain::try_pop::message" name="message">
      <type name="ProcessingFunctorChain&lt;ProcessingFunctorType, NumberOfProcessingFunctors&gt;::MessagePtr" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="wield::adapters::ProcessingFunctorChain::unsafe_size" name="unsafe_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
</classtemplate>