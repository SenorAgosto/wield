<?xml version='1.0' encoding='utf-8'?>
<namespace id="wield" name="wield" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <namespace name="adapters" ref="wield::adapters#wield::adapters" />
  <namespace name="logging" ref="wield::logging#wield::logging" />
  <namespace name="policies" ref="wield::policies#wield::policies" />
  <classtemplate name="DispatcherBase" ref="wield::DispatcherBase#wield::DispatcherBase">
    <brief> Dispatcher</brief>
    <templatetypeparameter id="wield::DispatcherBase::StageEnum" name="StageEnum" />
    <templatetypeparameter id="wield::DispatcherBase::Stage" name="Stage" />
  </classtemplate>
  <classtemplate name="DispatcherInterface" ref="wield::DispatcherInterface#wield::DispatcherInterface">
    <templatetypeparameter id="wield::DispatcherInterface::StageEnumType" name="StageEnumType" />
    <templatetypeparameter id="wield::DispatcherInterface::StageType" name="StageType" />
  </classtemplate>
  <class name="DuplicateStageRegistrationException" ref="wield::DuplicateStageRegistrationException#wield::DuplicateStageRegistrationException" />
  <classtemplate name="MessageBase" ref="wield::MessageBase#wield::MessageBase">
    <brief>/ @note [ARG]: strictly speaking, we don't need to parameterize</brief>
    <templatetypeparameter id="wield::MessageBase::ProcessingFunctor" name="ProcessingFunctor" />
  </classtemplate>
  <classtemplate name="SchedulerBase" ref="wield::SchedulerBase#wield::SchedulerBase">
    <templatetypeparameter id="wield::SchedulerBase::SchedulingPolicy" name="SchedulingPolicy" />
  </classtemplate>
  <classtemplate name="StageBase" ref="wield::StageBase#wield::StageBase">
    <brief> Stage</brief>
    <templatetypeparameter id="wield::StageBase::StageEnum" name="StageEnum">
      <brief>the enum defining names of all stages.</brief>
    </templatetypeparameter>
    <templatetypeparameter id="wield::StageBase::ProcessingFunctor" name="ProcessingFunctor">
      <brief>this stage's processing function.</brief>
    </templatetypeparameter>
    <templatetypeparameter id="wield::StageBase::QueueType" name="QueueType">
      <brief>the type of queue this stage will get inputs from.</brief>
    </templatetypeparameter>
  </classtemplate>
  <structtemplate name="Traits" ref="wield::Traits#wield::Traits">
    <brief>ClientDefinedTraits contains types the client *must* define.</brief>
    <templatetypeparameter id="wield::Traits::ClientDefinedTraits" name="ClientDefinedTraits" />
  </structtemplate>
</namespace>